/* THIS IS THE TEMPLATE FOR Lexer.jj. PLEASE FILL IN AT LEAST ALL INSTANCES OF
 * THE COMMENT "FILLIN", AND REMOVE THIS HEADER COMMENT. */

options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC = false;
}

PARSER_BEGIN(Lexer)
    package edu.purdue.cs352.minijava.parser;

    import java.util.*;

    public class Lexer {
        public static void main(String[] args) {
            Lexer lexer;
            List<Token> tl;

            if (args.length != 1) {
                System.out.println("Use: mjlex <input file>");
                return;
            }

            try {
                lexer = new Lexer(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException ex) {
                System.out.println("File " + args[0] + " not found.");
                return;
            }

            try {
                tl = lexer.TokenList();
            } catch (ParseException ex) {
                System.out.println(ex.getMessage());
                return;
            }

            for (Token tok : tl) {
                System.out.println(tok);
            }
        }
    }
PARSER_END(Lexer)

// Lexical definitions

// Whitespace
SKIP :
{
    " " | // FILLIN
}

// Comments
SKIP :
{
    < "//" (~["\n"])* "\n" >
|   < /* C-style (FILLIN) */ >
}

// MiniJava keywords
TOKEN :
{
    < KW_CLASS: "class" >
|   // FILLIN
}

// MiniJava symbols
TOKEN :
{
    < SYM_LBRACE: "{" >
|   // FILLIN
}

// Identifiers
TOKEN :
{
    < IDENTIFIER: /* FILLIN */ >
}

// Integer literals
TOKEN :
{
    < INT_LITERAL: /* FILLIN */ >
}

/* The following is a simple grammar that will allow you to test the generated
 * lexer. */
List<Token> TokenList() :
{
    Token t;
    List<Token> tl = new ArrayList<Token>();
}
{

    (
        t = Token()
        { tl.add(t); }
    )*
    <EOF>
    { return tl; }
}

Token Token():
{}
{
    (
    "class"
|   /* FILLIN (just list all keywords and symbols) */
|   <IDENTIFIER>
|   <INT_LITERAL>
    )
    { return token; }
}
